/******************************************************************************
 * This file is part of lslidar_cx driver.
 *
 * Copyright 2022 LeiShen Intelligent Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *****************************************************************************/

#include "driver.h"
#include <iostream>

// namespace apollo {
// namespace drivers {
// namespace ls180s2_gazel {

volatile sig_atomic_t flag = 1;

static void my_handler(int sig) {
    flag = 0;
}

int main(int argc, char **argv) {
    apollo::cyber::Init(argv[0]);
    std::cout << "main 34";
    //const std::shared_ptr<apollo::cyber::Node> node(apollo::cyber::CreateNode("lslidar_node", ""));
    apollo::cyber::Rate rate(2.0);

    signal(SIGINT, my_handler);

    // start the driver
    std::cout << "main 41";
    apollo::drivers::ls180s2_gazel::LslidarChDriver driver;
    std::cout << "main 43";
    if (!driver.Init()) {
        std::cout << "main 45";
        std::cout << "Cannot initialize lslidar driver...";
        return 0;
    }
    //loop until shut down or end of file
    std::cout << "main 50";
    while (apollo::cyber::OK() && driver.polling()) { 
        std::cout << "main 52";
        AINFO << "Cyber is working and polling in process";
        rate.Sleep();
    }
    // rate.Sleep();
    return 0;
}

// }
// }
// }